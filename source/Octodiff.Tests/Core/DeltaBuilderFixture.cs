using System;
using System.IO;
using System.Linq;
using NUnit.Framework;
using Octodiff.Core;
using Octodiff.Diagnostics;
using Octodiff.Tests.Util;

namespace Octodiff.Tests.Core
{
    public class DeltaBuilderFixture
    {
        static byte[] BuildDelta(byte[] newFile, byte[] signatureFile)
        {
            var d = new DeltaBuilder();

            using (var inputNewFileStream = new MemoryStream(newFile))
            using (var inputSigFileStream = new MemoryStream(signatureFile))
            using (var outputDeltaFileStream = new MemoryStream())
            {
                var sigReader = new SignatureReader(inputSigFileStream, NullProgressReporter.Instance);
                // there's not a great deal of value in testing AggregateCopyOperationsDecorator separately from BinaryDeltaWriter
                // and we want test output which contains the aggregate so we can replicate on other platforms
                var deltaWriter = new AggregateCopyOperationsDecorator(new BinaryDeltaWriter(outputDeltaFileStream));
                
                d.BuildDelta(inputNewFileStream, sigReader, deltaWriter);

                return outputDeltaFileStream.ToArray();
            }
        }
        
        // just helps us get test input data
        static byte[] BuildSignature(byte[] input, short signatureChunkSize = SignatureBuilder.DefaultChunkSize)
        {
            using (var inStream = new MemoryStream(input))
            using (var outStream = new MemoryStream())
            {
                new SignatureBuilder { ChunkSize = signatureChunkSize }.Build(inStream, new SignatureWriter(outStream));

                return outStream.ToArray();
            }
        }
        
        [Test]
        public void BuildsNoOpDeltaForSameInput()
        {
            var signature = BuildSignature(Helpers.TestData());

            var deltaFile = BuildDelta(Helpers.TestData(), signature);
            Assert.AreEqual("4f43544f44454c544101045348413114000000330bd06982d3b5dbda6c1a6ad16687a0cdb03c0d3e3e3e6000000000000000000802000000000000", deltaFile.ToHexString());
        }
        
        [Test]
        public void BuildsFullDeltaForNoInput()
        {
            var signature = BuildSignature(Array.Empty<byte>());

            var deltaFile = BuildDelta(Helpers.TestData(), signature);
            Assert.AreEqual("4f43544f44454c544101045348413114000000330bd06982d3b5dbda6c1a6ad16687a0cdb03c0d3e3e3e80080200000000000030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7a3bec4300a06082a8648ce3d0403023058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c0454455354301e170d3233303332303039343834325a170d3234303331393039343834325a3058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c04544553543059301306072a8648ce3d020106082a8648ce3d03010703420004504b77248d83e2e3e209bbb2297a0e4d24ff45e79eff88dd165e6419ae98512dabd2219da46e93d7ff98d5a1cb80314a57f37d0931ecf7f3bd4bce212cfd2cbaa3533051301d0603551d0e04160414badd278a31e012776afbfda4ead8fdce904f0efc301f0603551d23041830168014badd278a31e012776afbfda4ead8fdce904f0efc300f0603551d130101ff040530030101ff300a06082a8648ce3d04030203470030440220599cef920115b64a7d0bc7de55a84bba7f05ee78b9e903af7cb52b4a5dcc8ea2022006575445dab9c21325a48de3bd7ce51a34612015a74648787c7a7e0326453770", deltaFile.ToHexString());
        }
        
        [Test]
        public void BuildsFullIfInputIsSmallerThanWholeFile()
        {
            var signature = BuildSignature(Helpers.TestData());

            var newFile = Helpers.TestData();

            newFile[32] = 0xaa;
            newFile[33] = 0xab;
            newFile[34] = 0xac;
            
            var deltaFile = BuildDelta(newFile, signature);
            Assert.AreEqual("4f43544f44454c54410104534841311400000014ba64eeabad295dd60cfabd648ff176b64890773e3e3e80080200000000000030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7aaabac300a06082a8648ce3d0403023058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c0454455354301e170d3233303332303039343834325a170d3234303331393039343834325a3058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c04544553543059301306072a8648ce3d020106082a8648ce3d03010703420004504b77248d83e2e3e209bbb2297a0e4d24ff45e79eff88dd165e6419ae98512dabd2219da46e93d7ff98d5a1cb80314a57f37d0931ecf7f3bd4bce212cfd2cbaa3533051301d0603551d0e04160414badd278a31e012776afbfda4ead8fdce904f0efc301f0603551d23041830168014badd278a31e012776afbfda4ead8fdce904f0efc300f0603551d130101ff040530030101ff300a06082a8648ce3d04030203470030440220599cef920115b64a7d0bc7de55a84bba7f05ee78b9e903af7cb52b4a5dcc8ea2022006575445dab9c21325a48de3bd7ce51a34612015a74648787c7a7e0326453770", deltaFile.ToHexString());
        }
        
        [Test]
        public void BuildsDeltaForSmallChangesInFile()
        {
            // deliberately use small chunk size because our input is smaller than the default 2k chunk size and otherwise it just re-delta's the whole file
            var signature = BuildSignature(Helpers.TestData(), SignatureBuilder.MinimumChunkSize);

            var newFile = Helpers.TestData();

            newFile[32] = 0xaa;
            newFile[33] = 0xab;
            newFile[34] = 0xac;
            
            // Note: our newFile is 520 bytes, but our deltaFile is only 247
            
            var deltaFile = BuildDelta(newFile, signature);
            Assert.AreEqual("4f43544f44454c54410104534841311400000014ba64eeabad295dd60cfabd648ff176b64890773e3e3e80800000000000000030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7aaabac300a06082a8648ce3d0403023058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06036080000000000000008801000000000000", deltaFile.ToHexString());
        }
        
        [Test]
        public void BuildsDeltaForSmallChangesInFile_Prepend()
        {
            // deliberately use small chunk size because our input is smaller than the default 2k chunk size and otherwise it just re-delta's the whole file
            var signature = BuildSignature(Helpers.TestData(), SignatureBuilder.MinimumChunkSize);

            // prepend a byte to the front of the file as an alternate logic test
            var newFile = new[] { (byte)0xaa }.Concat(Helpers.TestData()).ToArray();

            // Note: our newFile is 521 bytes, but our deltaFile is only 137
            
            var deltaFile = BuildDelta(newFile, signature);
            Assert.AreEqual("4f43544f44454c544101045348413114000000e5ca5051b8cf462ed567a8f88802fd9e62a0f0e83e3e3e800100000000000000aa6000000000000000000802000000000000", deltaFile.ToHexString());
        }
        
        [Test]
        public void BuildsDeltaForSmallChangesInFileEvenWhenFileIsLarger()
        {
            var original = Helpers.GenerateTestData(128 * 1024); // 128k file
            var signature = BuildSignature(original);

            var newFile = original.ToArray();

            newFile[32] = 0xaa;
            newFile[33] = 0xab;
            newFile[34] = 0xac;
            
            var deltaFile = BuildDelta(newFile, signature);
            // our delta file is roughly 3k. Still large but much smaller than the entire 128k newFile
            Assert.AreEqual("4f43544f44454c54410104534841311400000050f7ec0e6d4fe4ab8400b759e2b000f1d0aced8e3e3e3e80280000000000000030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7aaabac300a06082a6000780000000000000088010000000000800800000000000000a3bec4300a06082a600078000000000000007000000000000080d007000000000000060355040b0c03522644310d300b06035504030c0454455354301e170d3233303332303039343834325a170d3234303331393039343834325a3058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c04544553543059301306072a8648ce3d020106082a8648ce3d03010703420004504b77248d83e2e3e209bbb2297a0e4d24ff45e79eff88dd165e6419ae98512dabd2219da46e93d7ff98d5a1cb80314a57f37d0931ecf7f3bd4bce212cfd2cbaa3533051301d0603551d0e04160414badd278a31e012776afbfda4ead8fdce904f0efc301f0603551d23041830168014badd278a31e012776afbfda4ead8fdce904f0efc300f0603551d130101ff040530030101ff300a06082a8648ce3d04030203470030440220599cef920115b64a7d0bc7de55a84bba7f05ee78b9e903af7cb52b4a5dcc8ea2022006575445dab9c21325a48de3bd7ce51a34612015a74648787c7a7e032645377030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7a3bec4300a06082a8648ce3d0403023058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c0454455354301e170d3233303332303039343834325a170d3234303331393039343834325a3058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c04544553543059301306072a8648ce3d020106082a8648ce3d03010703420004504b77248d83e2e3e209bbb2297a0e4d24ff45e79eff88dd165e6419ae98512dabd2219da46e93d7ff98d5a1cb80314a57f37d0931ecf7f3bd4bce212cfd2cbaa3533051301d0603551d0e04160414badd278a31e012776afbfda4ead8fdce904f0efc301f0603551d23041830168014badd278a31e012776afbfda4ead8fdce904f0efc300f0603551d130101ff040530030101ff300a06082a8648ce3d04030203470030440220599cef920115b64a7d0bc7de55a84bba7f05ee78b9e903af7cb52b4a5dcc8ea2022006575445dab9c21325a48de3bd7ce51a34612015a74648787c7a7e032645377030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7a3bec4300a06082a8648ce3d0403023058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c0454455354301e170d3233303332303039343834325a170d3234303331393039343834325a3058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c04544553543059301306072a8648ce3d020106082a8648ce3d03010703420004504b77248d83e2e3e209bbb2297a0e4d24ff45e79eff88dd165e6419ae98512dabd2219da46e93d7ff98d5a1cb80314a57f37d0931ecf7f3bd4bce212cfd2cbaa3533051301d0603551d0e04160414badd278a31e012776afbfda4ead8fdce904f0efc301f0603551d23041830168014badd278a31e012776afbfda4ead8fdce904f0efc300f0603551d130101ff040530030101ff300a06082a8648ce3d04030203470030440220599cef920115b64a7d0bc7de55a84bba7f05ee78b9e903af7cb52b4a5dcc8ea2022006575445dab9c21325a48de3bd7ce51a34612015a74648787c7a7e032645377030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7a3bec4300a06082a8648ce3d0403023058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c0454455354301e170d3233303332303039343834325a170d3234303331393039343834325a3058310b30090603550406130241553113301106035504080c0a536f6d652d537461746531173015060355040a0c0e4f63746f707573204465706c6f79310c300a060355040b0c03522644310d300b06035504030c04544553543059301306072a8648ce3d020106082a8648ce3d03010703420004504b77248d83e2e3e209bbb2297a0e4d24ff45e79eff88dd165e6419ae98512dabd2219da46e93d7ff98d5a1cb80314a57f37d0931ecf7f3bd4bce212cfd2cbaa3533051301d0603551d0e04160414badd278a31e012776afbfda4ead8fdce904f0efc301f0603551d23041830168014badd278a31e012776afbfda4ead8fdce904f0efc300f0603551d130101ff040530030101ff300a06082a8648ce3d04030203470030440220599cef920115b64a7d0bc7de55a84bba7f05ee78b9e903af7cb52b4a5dcc8ea2022006575445dab9c21325a48de3bd7ce51a34612015a74648787c7a7e032645377030820204308201aba003020102021418d83f07718be4121df0a18d7610faf8d7", deltaFile.ToHexString());
        }
        
        [Test]
        public void BuildsDeltaForSmallChangesInFileEvenWhenFileIsLarger_MultipleDisjointChanges()
        {
            var original = Helpers.GenerateTestData(128 * 1024); // 128k file
            var signature = BuildSignature(original);

            var newFile = original.ToArray();

            newFile[32] = 0xaa;
            newFile[33] = 0xab;
            newFile[34] = 0xac;
            
            newFile[32000] = 0xaa;
            newFile[33000] = 0xab;
            newFile[34000] = 0xac;
            
            var deltaFile = BuildDelta(newFile, signature);
            // our delta file is roughly 6k (two chunks changed). Still large but much smaller than the entire 128k newFile
            Assert.AreEqual("", deltaFile.ToHexString());
        }
    }
}